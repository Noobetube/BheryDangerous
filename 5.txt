class StackException extends Exception {

    public StackException(String message) {
        super(message); // Calls Exception's constructor
    }
}

interface ExStack {

    public void push(int x) throws StackException;

    public int pop() throws StackException;
}

class Stack implements ExStack {

    int stck[] = new int[10];
    int tos;

    // initilize top of stack
    Stack() {
        tos = -1;
    }

    // push an item into stack
    public void push(int item) throws StackException {
        if (tos == 9) {
            throw new StackException("stack is full");
        } else {
            stck[++tos] = item;
        }
    }

    // pop an item from the stack
    public int pop() throws StackException {
        if (tos < 0) {
            throw new StackException("Stack is empty");

        } else {
        }
        return stck[tos--];
    }
}

class TestStack {

    public static void main(String[] args) {
        Stack mystack1 = new Stack();

        // push numbers onto the stack
        try {
            for (int i = 0; i < 12; i++) {
                mystack1.push(i);
            }

            System.out.println("Stack in mystack1");
            for (int i = 0; i < 10; i++) {
                System.out.println(mystack1.pop());
            }

        } catch (StackException e) {
            System.out.println("Error detected: " + e.getMessage());

        }
    }
}
